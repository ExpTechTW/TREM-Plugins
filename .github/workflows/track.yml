name: Track Repository Stats

on:
  pull_request:
    types:
      - closed # 當 PR 關閉（合併或取消）時觸發

jobs:
  track-stats:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.changed_files, 'infos/')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil pytz

      - name: Fetch repository stats
        run: |
          python - <<EOF
          import json
          import os
          import requests
          from datetime import datetime
          import pytz
          import time

          print("Starting repository stats collection...")

          def get_repo_stats(owner, repo):
              print(f"Fetching stats for {owner}/{repo}")
              base_url = f"https://api.github.com/repos/{owner}/{repo}"
              
              # 獲取基本倉庫信息
              repo_response = requests.get(base_url)
              if repo_response.status_code != 200:
                  print(f"Failed to get repo info: {repo_response.status_code}")
                  return None
              
              repo_data = repo_response.json()
              
              # 獲取發布版本
              releases_response = requests.get(f"{base_url}/releases")
              releases = releases_response.json() if releases_response.status_code == 200 else []
              
              total_downloads = 0
              release_stats = []
              for release in releases:
                  release_downloads = 0
                  for asset in release["assets"]:
                      release_downloads += asset["download_count"]
                  
                  release_stats.append({
                      "tag_name": release["tag_name"],
                      "name": release["name"],
                      "downloads": release_downloads,
                      "published_at": release["published_at"]
                  })
                  total_downloads += release_downloads
              
              return {
                  "name": repo_data["name"],
                  "full_name": repo_data["full_name"],
                  "releases": {
                      "total_count": len(releases),
                      "total_downloads": total_downloads,
                      "releases": release_stats
                  }
              }

          try:
              print("Creating data directory...")
              os.makedirs("data", exist_ok=True)
              
              stats = []
              if os.path.exists("data/repository_stats.json"):
                  print("Loading existing stats file...")
                  with open("data/repository_stats.json", "r", encoding="utf-8") as f:
                      stats = json.load(f)
              
              # 現有插件的 key
              existing_keys = {item["full_name"]: item for item in stats}

              print("Checking for infos directory...")
              if os.path.exists("infos"):
                  print(f"Found infos directory, contents: {os.listdir('infos')}")
                  for filename in os.listdir("infos"):
                      if filename.endswith(".json"):
                          print(f"Processing {filename}...")
                          with open(f"infos/{filename}", "r", encoding="utf-8") as f:
                              try:
                                  data = json.load(f)
                                  print(f"JSON content: {data}")
                                  if "link" in data and "github.com" in data["link"]:
                                      parts = data["link"].strip("/").split("/")
                                      if len(parts) >= 2:
                                          owner = parts[-2]
                                          repo = parts[-1]
                                          repo_key = f"{owner}/{repo}"
                                          print(f"Found repository: {repo_key}")
                                          
                                          repo_stats = get_repo_stats(owner, repo)
                                          if repo_stats:
                                              # 添加或更新數據
                                              repo_stats["metadata"] = {
                                                  "updated_at_utc_8": datetime.now(pytz.timezone('Asia/Taipei')).isoformat(),
                                                  "source_file": filename
                                              }
                                              existing_keys[repo_key] = repo_stats
                                              print(f"Successfully updated stats for {repo_key}")
                                          else:
                                              print(f"Failed to get stats for {repo_key}")
                                          
                                          time.sleep(1)
                              except Exception as e:
                                  print(f"Error processing {filename}: {str(e)}")
                                  continue

              # 更新 stats
              stats = list(existing_keys.values())

              print("Saving results...")
              with open("data/repository_stats.json", "w", encoding="utf-8") as f:
                  json.dump(stats, f, indent=2, ensure_ascii=False)
              print("Done!")
                  
          except Exception as e:
              print(f"Error: {str(e)}")
              raise e
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/repository_stats.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Update repository statistics [skip ci]"
          git push
