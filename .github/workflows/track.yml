name: Track Repository Stats

on:
  pull_request:
    types:
      - closed # 當 PR 關閉時觸發

jobs:
  track-stats:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Validate Merge and File Changes
        run: |
          echo "Checking if PR is merged..."
          if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
            echo "PR is not merged. Skipping workflow."
            exit 0
          fi

          echo "Fetching list of changed files..."
          git fetch origin ${{ github.event.pull_request.head.sha }}
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.pull_request.merge_commit_sha }})
          echo "Changed files: $CHANGED_FILES"

          if ! echo "$CHANGED_FILES" | grep -q "^infos/"; then
            echo "No changes in infos/ directory. Skipping workflow."
            exit 0
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil pytz

      - name: Fetch repository stats
        run: |
          python - <<EOF
          import json
          import os
          import requests
          from datetime import datetime
          from pytz import timezone

          # 定義函數
          def get_repo_stats(owner, repo):
              """獲取指定 GitHub 倉庫的統計數據"""
              base_url = f"https://api.github.com/repos/{owner}/{repo}"

              # 獲取基本倉庫信息
              repo_response = requests.get(base_url)
              if repo_response.status_code != 200:
                  print(f"Failed to get repo info: {repo_response.status_code}")
                  return None

              repo_data = repo_response.json()

              # 獲取發布版本
              releases_response = requests.get(f"{base_url}/releases")
              releases = releases_response.json() if releases_response.status_code == 200 else []

              total_downloads = 0
              release_stats = []
              for release in releases:
                  release_downloads = sum(asset["download_count"] for asset in release["assets"])
                  release_stats.append({
                      "tag_name": release["tag_name"],
                      "name": release["name"],
                      "downloads": release_downloads,
                      "published_at": release["published_at"]
                  })
                  total_downloads += release_downloads

              return {
                  "name": repo_data["name"],
                  "full_name": repo_data["full_name"],
                  "releases": {
                      "total_count": len(releases),
                      "total_downloads": total_downloads,
                      "releases": release_stats
                  }
              }

          # 主程序
          try:
              print("初始化資料...")
              os.makedirs("data", exist_ok=True)

              # 加載現有的 repository_stats.json
              stats_file = "data/repository_stats.json"
              repository_stats = []
              if os.path.exists(stats_file):
                  with open(stats_file, "r", encoding="utf-8") as f:
                      repository_stats = json.load(f)

              # 設置當前時區 (UTC+8)
              now = datetime.now(timezone("Asia/Taipei")).strftime("%Y-%m-%d %H:%M:%S")

              # 檢查 infos 目錄
              if os.path.exists("infos"):
                  for filename in os.listdir("infos"):
                      if filename.endswith(".json"):
                          with open(f"infos/{filename}", "r", encoding="utf-8") as f:
                              try:
                                  data = json.load(f)
                                  if "link" in data and "github.com" in data["link"]:
                                      parts = data["link"].strip("/").split("/")
                                      if len(parts) >= 2:
                                          owner, repo = parts[-2], parts[-1]
                                          print(f"處理倉庫: {owner}/{repo}")
                                          
                                          stats = get_repo_stats(owner, repo)
                                          if stats:
                                              # 尋找是否已有對應的 object
                                              matched = False
                                              for obj in repository_stats:
                                                  if obj["name"] == stats["name"]:
                                                      obj.update(stats)  # 更新現有數據
                                                      obj["updated_at"] = now
                                                      matched = True
                                                      print(f"更新倉庫數據: {stats['name']}")
                                                      break
                                              if not matched:
                                                  # 如果沒有匹配的 object，新增
                                                  stats["updated_at"] = now
                                                  repository_stats.append(stats)
                                                  print(f"新增倉庫數據: {stats['name']}")

                              except Exception as e:
                                  print(f"處理 {filename} 時發生錯誤: {str(e)}")
                                  continue

              # 保存更新後的 repository_stats.json
              with open(stats_file, "w", encoding="utf-8") as f:
                  json.dump(repository_stats, f, indent=2, ensure_ascii=False)

              print("數據更新完成！")

          except Exception as e:
              print(f"發生錯誤: {str(e)}")
              raise
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/repository_stats.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Update repository statistics [skip ci]"
          git push
